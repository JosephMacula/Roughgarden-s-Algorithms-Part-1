def merge_sort(input_array):
    if len(input_array) <= 1:
        return input_array
    else:
        r = int(len(input_array)/2)
        array_half1 = input_array[:r]
        array_half2 = input_array[r::] 
        
        '''Recurse on each half of the input array.'''
        
        merge_sort(array_half1)
        merge_sort(array_half2)
        
        '''The merge step of the algorithm. Maintains 3 pointers. Pointers i and j 
        keep track of how far you've moved through each of the two sorted halves
        of the input array. Pointer k keeps track of how far you've moved through
        the input array, modifying values as needed to create a sorted version of
        the array.''' The three while loops below do the following:
        
        Compare the two values pointed at by i and j, take the smaller value, 
        assign this value to k-th entry of input array.'''
        
        i = 0
        j = 0
        k = 0
        
        while i < len(array_half1) and j < len(array_half2):
            if array_half1[i] < array_half2[j]:
                input_array[k] = array_half1[i]
                i += 1
                k += 1
            else:
                input_array[k] = array_half2[j]
                j += 1
                k += 1
        
        while i < len(array_half1):
            input_array[k] = array_half1[i]
            i += 1
            k += 1
            
        while j < len(array_half2):
            input_array[k] = array_half2[j]
            j += 1
            k += 1
        
        return input_array


def merge_sort_and_split_inv(input_array):
    if len(input_array) <= 1:
        return (input_array, 0)
    else:
        r = int(len(input_array)/2)
        array_half1 = input_array[:r]
        array_half2 = input_array[r::] 
        
        '''Recurse on each half of the input array.'''
        
        merge_sort(array_half1)
        merge_sort(array_half2)
        
        i = 0
        j = 0
        k = 0
        split_inv = 0
        
        while i < len(array_half1) and j < len(array_half2):
            if array_half1[i] < array_half2[j]:
                input_array[k] = array_half1[i]
                i += 1
                k += 1
            else:
                input_array[k] = array_half2[j]
                j += 1
                k += 1
                split_inv = split_inv + (len(array_half1) - i)
        
        while i < len(array_half1):
            input_array[k] = array_half1[i]
            i += 1
            k += 1
            
        while j < len(array_half2):
            input_array[k] = array_half2[j]
            j += 1
            k += 1
            split_inv = split_inv + (len(array_half1) - i)
        
        return (input_array, split_inv)

def count_split_inversions(A, B):
    
    return(merge_sort_and_split_inv(A)[1] + merge_sort_and_split_inv(B)[1])
       

def inversion_counter(input_array):
    if len(input_array) == 1:
        return 0
    else:
        r = len(input_array)//2
        x = inversion_counter(input_array[:r])
        y = inversion_counter(input_array[r::])
        z = count_split_inversions(input_array[:r], input_array[r::])
        
        return x + y + z
